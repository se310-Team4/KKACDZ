{"mappings":"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","sources":["src/tactong/index.js"],"sourcesContent":["///// CONFIG VARIABLES /////\nconst baseDifficulty = 1;\nconst patternDelay = 500;\nconst betweenPatternDelay = 100;\n\n///// DOCUMENT ELEMENTS /////\nconst bestScoreElm = document.getElementById('best-score');\nconst currentScoreElm = document.getElementById('current-score');\nconst clickPlay = document.getElementById('clickToPlay');\nconst circle = document.getElementById('circle');\nconst quadrants = {\n    red: document.getElementById('red'),\n    blue: document.getElementById('blue'),\n    yellow: document.getElementById('yellow'),\n    green: document.getElementById('green'),\n};\nconst hoverQuadrants = {\n    red: document.getElementById('redUnder'),\n    blue: document.getElementById('blueUnder'),\n    yellow: document.getElementById('yellowUnder'),\n    green: document.getElementById('greenUnder'),\n};\nconst soundFrequency = {\n    red: 700,\n    blue: 800,\n    green: 900,\n    yellow: 1000,\n    gameEnd: 300,\n};\n\n///// GLOBAL VARIABLES /////\nlet listeners = {};\nlet pattern = [];\nlet guess = [];\nlet gameCount = 0;\nlet bestScore = getBestScore() === null ? 0 : getBestScore();\nlet isNewGame = true;\n\nfunction getRandomColor() {\n    const colors = Object.keys(quadrants);\n    return colors[Math.floor(Math.random() * colors.length)];\n}\n\nfunction generateRandomPattern(numSteps) {\n    const pattern = [];\n    for (let i = 0; i < numSteps; i++)\n        pattern.push(getRandomColor());\n    return pattern;\n}\n\nfunction clearBoard() {\n    for (const quadrant of Object.values(quadrants))\n        quadrant.style.display = 'none';\n}\n\nfunction showBoard() {\n    for (const quadrant of Object.values(quadrants))\n        quadrant.style.display = 'block';\n}\n\nfunction hideQuadrant(quadrant) {\n    quadrant.style.display = 'none';\n}\n\nfunction showQuadrant(quadrant) {\n    quadrant.style.display = 'block';\n}\n\nfunction playPattern() {\n    // play the pattern in order showing each step fro patternDelay ms, and clearing the board for betweenPatternDelay time\n    return new Promise((resolve, reject) => {\n        clearBoard();\n        let i = 0;\n        const interval = setInterval(() => {\n            if (i >= pattern.length) {\n                clearInterval(interval);\n                resolve();\n            } else {\n                quadrants[pattern[i]].style.display = 'block';\n                setTimeout(() => {\n                    quadrants[pattern[i]].style.display = 'none';\n                    i++;\n                }, patternDelay);\n                playSound(pattern[i], 200);\n            }\n        }, patternDelay + betweenPatternDelay);\n    });\n}\n\nfunction playSound(frequency, playTime) {\n    const context = new AudioContext();\n    const oscillator = context.createOscillator();\n    oscillator.type = \"sine\";\n    oscillator.frequency.value = soundFrequency[frequency];\n    oscillator.connect(context.destination);\n    oscillator.start();\n    setTimeout(() => {\n        oscillator.stop();\n    }, playTime);\n}\n\nfunction registerClick(color) {\n    playSound(color, 200);\n    guess.push(color);\n    checkEnd();\n}\n\nfunction checkEnd() {\n    if (guess.length === pattern.length) {\n        if (guess.join('') === pattern.join('')) {\n            startNextGame();\n        } else {\n            endGame();\n        }\n    }\n}\n\nfunction endGame() {\n    isNewGame = true;\n    gameCount = 0;\n    pattern = [];\n    guess = [];\n    showBoard();\n    circle.classList.add('disableCircle');\n    clickPlay.style.display = 'block';\n    stopHoverListeners();\n    updateScore();\n    playSound('gameEnd', 300);\n    setTimeout(() => document.addEventListener('mouseup', docClickListener), 200);\n}\n\nfunction updateScore() {\n    const currentScore = gameCount === 0 ? 0 : gameCount - 1;   // prevents showing -1 value for current score\n    if (currentScore > bestScore) {\n        setBestScore(currentScore);\n        bestScore = currentScore;\n    }\n    bestScoreElm.innerText = bestScore;\n    currentScoreElm.innerText = currentScore;\n}\n\nfunction startNextGame() {\n    stopHoverListeners();\n    isNewGame ? isNewGame = false : gameCount++;\n    updateScore();\n    guess = [];\n    pattern = generateRandomPattern(gameCount+baseDifficulty);\n    circle.classList.remove('disableCircle');\n    clickPlay.style.display = 'none';\n    playPattern().then(() => {\n        startHoverListeners();\n    })\n}\n\nfunction restartGame() {\n    gameCount = 0;\n    updateScore();\n    startNextGame();\n}\n\nfunction startAnimation() {\n    clearBoard();\n    let checker = true;\n    const interval = setInterval(() => {\n        if (checker) {\n            quadrants['red'].style.display = 'block';\n            quadrants['yellow'].style.display = 'block';\n            quadrants['blue'].style.display = 'none';\n            quadrants['green'].style.display = 'none';\n        } else {\n            quadrants['red'].style.display = 'none';\n            quadrants['yellow'].style.display = 'none';\n            quadrants['blue'].style.display = 'block';\n            quadrants['green'].style.display = 'block';\n        }\n        checker = !checker;\n    }, 1000);\n    listeners['animation'] = interval;\n}\n\nfunction stopAnimation() {\n    clearInterval(listeners['animation']);\n}\n\nfunction startHoverListeners() {\n    // under quadrants sit under the colored quadrants and are used to detect when the mouse is hovering over a quadrant\n    for (const color of Object.keys(quadrants)) {\n        const quadrant = quadrants[color];\n        const underQuadrant = hoverQuadrants[color];\n\n        listeners['mouseenter' + color] = showQuadrant.bind(null, quadrant);\n        listeners['mouseleave' + color] = hideQuadrant.bind(null, quadrant);\n        listeners['mouseup' + color] = registerClick.bind(null, color);\n\n        underQuadrant.addEventListener('mouseenter', listeners['mouseenter' + color]);\n        quadrant.addEventListener('mouseleave', listeners['mouseleave' + color]);\n        quadrant.addEventListener('mouseup', listeners['mouseup' + color]);\n    }\n}\n\nfunction stopHoverListeners() {\n    for (const color of Object.keys(quadrants)) {\n        const quadrant = quadrants[color];\n        const underQuadrant = hoverQuadrants[color];\n\n        underQuadrant.removeEventListener('mouseenter', listeners['mouseenter' + color]);\n        quadrant.removeEventListener('mouseleave', listeners['mouseleave' + color]);\n        quadrant.removeEventListener('mouseup', listeners['mouseup' + color]);\n    }\n}\n\nfunction setBestScore(score) {\n    localStorage.setItem(\"bestScoreTactong\", score);\n}\n\nfunction getBestScore() {\n    return localStorage.getItem(\"bestScoreTactong\");\n}\n\nfunction docClickListener() {\n    if (gameCount === 0) {\n        startNextGame();\n        document.removeEventListener('mouseup', docClickListener);\n    }\n}\ndocument.addEventListener('mouseup', docClickListener);\nupdateScore();"],"names":["bestScoreElm","document","getElementById","currentScoreElm","clickPlay","circle","quadrants","red","blue","yellow","green","hoverQuadrants","soundFrequency","gameEnd","listeners","pattern","guess","gameCount","bestScore","getBestScore","isNewGame","getRandomColor","colors","Object","keys","Math","floor","random","length","clearBoard","quadrant","values","style","display","hideQuadrant","showQuadrant","playSound","frequency","playTime","context","AudioContext","oscillator","createOscillator","type","value","connect","destination","start","setTimeout","stop","registerClick","color","push","join","startNextGame","showBoard","classList","add","stopHoverListeners","updateScore","addEventListener","docClickListener","currentScore","score","localStorage","setItem","innerText","numSteps","i","generateRandomPattern","remove","Promise","resolve","reject","interval","setInterval","clearInterval","patternDelay","then","underQuadrant","bind","startHoverListeners","removeEventListener","getItem"],"version":3,"file":"index.14607a8b.js.map"}