{"mappings":"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","sources":["src/2048-expert/Grid.js","src/2048-expert/Tile.js","src/2048-expert/index.js"],"sourcesContent":["const GRID_SIZE = 6\nconst CELL_SIZE = 10\nconst CELL_GAP = 1.5\n\nexport default class Grid {\n  #cells\n\n  constructor(gridElement) {\n    gridElement.style.setProperty(\"--grid-size\", GRID_SIZE)\n    gridElement.style.setProperty(\"--cell-size\", `${CELL_SIZE}vmin`)\n    gridElement.style.setProperty(\"--cell-gap\", `${CELL_GAP}vmin`)\n    this.#cells = createCellElements(gridElement).map((cellElement, index) => {\n      return new Cell(\n        cellElement,\n        index % GRID_SIZE,\n        Math.floor(index / GRID_SIZE)\n      )\n    })\n  }\n\n  get cells() {\n    return this.#cells\n  }\n\n  get cellsByRow() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.y] = cellGrid[cell.y] || []\n      cellGrid[cell.y][cell.x] = cell\n      return cellGrid\n    }, [])\n  }\n\n  get cellsByColumn() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.x] = cellGrid[cell.x] || []\n      cellGrid[cell.x][cell.y] = cell\n      return cellGrid\n    }, [])\n  }\n\n  get #emptyCells() {\n    return this.#cells.filter(cell => cell.tile == null)\n  }\n\n  checkAvailableCell() {\n    if (this.#emptyCells.length === 0) {\n      return false\n    }\n    return true\n  }\n\n  randomEmptyCell() {\n    const randomIndex = Math.floor(Math.random() * this.#emptyCells.length)\n    return this.#emptyCells[randomIndex]\n  }\n}\n\nclass Cell {\n  #cellElement\n  #x\n  #y\n  #tile\n  #mergeTile\n\n  constructor(cellElement, x, y) {\n    this.#cellElement = cellElement\n    this.#x = x\n    this.#y = y\n  }\n\n  get x() {\n    return this.#x\n  }\n\n  get y() {\n    return this.#y\n  }\n\n  get tile() {\n    return this.#tile\n  }\n\n  set tile(value) {\n    this.#tile = value\n    if (value == null) return\n    this.#tile.x = this.#x\n    this.#tile.y = this.#y\n  }\n\n  get mergeTile() {\n    return this.#mergeTile\n  }\n\n  set mergeTile(value) {\n    this.#mergeTile = value\n    if (value == null) return\n    this.#mergeTile.x = this.#x\n    this.#mergeTile.y = this.#y\n  }\n\n  canAccept(tile) {\n    return (\n      this.tile == null ||\n      (this.mergeTile == null && this.tile.value === tile.value)\n    )\n  }\n\n  mergeTiles() {\n    if (this.tile == null || this.mergeTile == null) return\n    this.tile.value = this.tile.value + this.mergeTile.value\n    updateScores(this.tile.value)\n    this.mergeTile.remove()\n    this.mergeTile = null\n    checkWin(this.tile.value)\n  }\n}\n\nfunction createCellElements(gridElement) {\n  const cells = []\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n    const cell = document.createElement(\"div\")\n    cell.classList.add(\"cell\")\n    cells.push(cell)\n    gridElement.append(cell)\n  }\n  return cells\n}\n\nconst currentScoreDisplay = document.getElementById(\"current-score\");\nconst bestScoreDisplay = document.getElementById(\"best-score\");\n\nwindow.currentScore = 0;\nlet bestScore = getBestScore() === null ? 0 : getBestScore();\nbestScoreDisplay.innerHTML = bestScore;\n\nfunction updateScores(bonus) {\n  currentScore += bonus;\n  currentScoreDisplay.innerHTML = currentScore;\n  if (currentScore > parseInt(bestScore)) {\n    setBestScore(currentScore);\n    bestScoreDisplay.innerHTML = currentScore;\n  }\n}\n\nfunction checkWin(value) {\n    if (value == 2048) {\n      setTimeout(() => alert(\"You won!\"), 1);\n    }\n}\n\n\n","export default class Tile {\n  #tileElement\n  #x\n  #y\n  #value\n\n  constructor(tileContainer, value = Math.random() > 0.5 ? 2 : 4) {\n    this.#tileElement = document.createElement(\"div\")\n    this.#tileElement.classList.add(\"tile\")\n    tileContainer.append(this.#tileElement)\n    this.value = value\n  }\n\n  get value() {\n    return this.#value\n  }\n\n  set value(v) {\n    this.#value = v\n    this.#tileElement.textContent = v\n    switch (this.#tileElement.textContent) {\n      case \"\":\n      case \"0\":\n        this.#tileElement.style.backgroundColor = \"#afa184\";\n        this.#tileElement.style.style.colour = \"rgb(175, 161, 132)\";\n        break;\n      case \"2\":\n        this.#tileElement.style.backgroundColor = \"#eee4ea\";\n        break;\n      case \"4\":\n        this.#tileElement.style.backgroundColor = \"#ede2c8\";\n        break;\n      case \"8\":\n        this.#tileElement.style.backgroundColor = \"#f2b179\";\n        break;\n      case \"16\":\n        this.#tileElement.style.backgroundColor = \"#ffceaa\";\n        break;\n      case \"32\":\n        this.#tileElement.style.backgroundColor = \"#e8c083\";\n        break;\n      case \"64\":\n        this.#tileElement.style.backgroundColor = \"#ffab6e\";\n        break;\n      case \"128\":\n        this.#tileElement.style.backgroundColor = \"#fd9787\";\n        break;\n      case \"256\":\n        this.#tileElement.style.backgroundColor = \"#eah89c\";\n        break;\n      case \"512\":\n        this.#tileElement.style.backgroundColor = \"#76daff\";\n        break;\n      case \"1024\":\n        this.#tileElement.style.backgroundColor = \"#beeaab\";\n        break;\n      case \"2048\":\n        this.#tileElement.style.backgroundColor = \"#d7d0f0\";\n        break;\n    }\n  }\n\n  set x(value) {\n    this.#x = value\n    this.#tileElement.style.setProperty(\"--x\", value)\n  }\n\n  set y(value) {\n    this.#y = value\n    this.#tileElement.style.setProperty(\"--y\", value)\n  }\n\n  remove() {\n    this.#tileElement.remove()\n  }\n\n  waitForTransition(animation = false) {\n    return new Promise(resolve => {\n      this.#tileElement.addEventListener(\n        animation ? \"animationend\" : \"transitionend\",\n        resolve,\n        {\n          once: true,\n        }\n      )\n    })\n  }\n}\n\n\n\n","import Grid from \"./Grid.js\"\nimport Tile from \"./Tile.js\"\n\nconst gameBoard = document.getElementById(\"game-board\")\nconst currentScoreDisplay = document.getElementById(\"current-score\");\n\n// allow restarting the game\nconst newBtn = document.getElementById(\"new-btn\");\nnewBtn.onclick = function () {\n  gameBoard.textContent = '';\n  window.currentScore = 0;\n  currentScoreDisplay.innerHTML = 0;\n\n  newGame();\n};\n\nvar grid = new Grid(gameBoard)\ngrid.randomEmptyCell().tile = new Tile(gameBoard)\ngrid.randomEmptyCell().tile = new Tile(gameBoard)\n\nfunction newGame() {\n\n  grid = new Grid(gameBoard)\n\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  setupInput()\n}\n\nsetupInput()\n\nfunction setupInput() {\n  document.addEventListener(\"modal-closed\", enableInput);\n  document.addEventListener(\"modal-opened\", disableInput);\n}\n\n// accept keyboard input from the user\n// enable the handling of key presses\nfunction enableInput() {\n  document.addEventListener(\"keyup\", handleInput);\n}\n\n// disable the handling of key presses\nfunction disableInput() {\n  document.removeEventListener(\"keyup\", handleInput);\n}\n\nasync function handleInput(e) {\n  switch (e.key) {\n    case \"ArrowUp\":\n    case \"w\":\n      if (!canMoveUp()) {\n        setupInput()\n        return\n      }\n      await moveUp()\n      break\n    case \"ArrowDown\":\n      case \"s\":\n      if (!canMoveDown()) {\n        setupInput()\n        return\n      }\n      await moveDown()\n      break\n    case \"ArrowLeft\":\n    case \"a\":\n      if (!canMoveLeft()) {\n        setupInput()\n        return\n      }\n      await moveLeft()\n      break\n    case \"ArrowRight\":\n    case \"d\":\n      if (!canMoveRight()) {\n        setupInput()\n        return\n      }\n      await moveRight()\n      break\n    default:\n      setupInput()\n      return\n  }\n\n  grid.cells.forEach(cell => cell.mergeTiles())\n\n  const newTile = new Tile(gameBoard)\n  grid.randomEmptyCell().tile = newTile\n\n  if (grid.checkAvailableCell()) {\n    const newTile2 = new Tile(gameBoard)\n    grid.randomEmptyCell().tile = newTile2\n  }\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    newTile.waitForTransition(true).then(() => {\n      setTimeout(() => alert(\"\\t\\t You Lost\\n Your score is \" + currentScore), 1);\n      newGame();\n    })\n    return\n  } \n\n  setupInput()\n}\n\nfunction moveUp() {\n  return slideTiles(grid.cellsByColumn)\n}\n\nfunction moveDown() {\n  return slideTiles(grid.cellsByColumn.map(column => [...column].reverse()))\n}\n\nfunction moveLeft() {\n  return slideTiles(grid.cellsByRow)\n}\n\nfunction moveRight() {\n  return slideTiles(grid.cellsByRow.map(row => [...row].reverse()))\n}\n\nfunction slideTiles(cells) {\n  return Promise.all(\n    cells.flatMap(group => {\n      const promises = []\n      for (let i = 1; i < group.length; i++) {\n        const cell = group[i]\n        if (cell.tile == null) continue\n        let lastValidCell\n        for (let j = i - 1; j >= 0; j--) {\n          const moveToCell = group[j]\n          if (!moveToCell.canAccept(cell.tile)) break\n          lastValidCell = moveToCell\n        }\n\n        if (lastValidCell != null) {\n          promises.push(cell.tile.waitForTransition())\n          if (lastValidCell.tile != null) {\n            lastValidCell.mergeTile = cell.tile\n          } else {\n            lastValidCell.tile = cell.tile\n          }\n          cell.tile = null\n        }\n      }\n      return promises\n    })\n  )\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsByColumn)\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsByColumn.map(column => [...column].reverse()))\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsByRow)\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsByRow.map(row => [...row].reverse()))\n}\n\nfunction canMove(cells) {\n  return cells.some(group => {\n    return group.some((cell, index) => {\n      if (index === 0) return false\n      if (cell.tile == null) return false\n      const moveToCell = group[index - 1]\n      return moveToCell.canAccept(cell.tile)\n    })\n  })\n}"],"names":["$700bd615ed920069$export$2e2bcd8739ae039","cells","constructor","gridElement","style","setProperty","this","i","GRID_SIZE","cell","document","createElement","classList","add","push","append","createCellElements","map","cellElement","index","Cell","Math","floor","cellsByRow","reduce","cellGrid","y","x","cellsByColumn","emptyCells","filter","tile","checkAvailableCell","length","randomEmptyCell","randomIndex","random","mergeTile","value","canAccept","mergeTiles","bonus","currentScore","currentScoreDisplay","innerHTML","parseInt","bestScore","setBestScore","bestScoreDisplay","remove","setTimeout","alert","getElementById","window","getBestScore","$c57b9935d485d183$export$2e2bcd8739ae039","tileElement","tileContainer","v","textContent","backgroundColor","colour","waitForTransition","animation","Promise","resolve","addEventListener","once","gameBoard","onclick","newGame","grid","Grid","Tile","setupInput","enableInput","disableInput","handleInput","removeEventListener","async","e","key","canMoveUp","slideTiles","canMoveDown","column","reverse","canMoveLeft","canMoveRight","row","forEach","newTile","newTile2","then","all","flatMap","group","promises","lastValidCell","j","moveToCell","canMove","some"],"version":3,"file":"index.0178d7d0.js.map"}