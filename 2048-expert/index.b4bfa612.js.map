{"mappings":"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","sources":["src/2048-expert/index.js"],"sourcesContent":["const gameBoard = document.querySelector(\".game-board\");\nconst currentScoreDisplay = document.getElementById(\"current-score\");\nconst bestScoreDisplay = document.getElementById(\"best-score\");\nconst WIDTH = 6;\nlet totalCell = WIDTH * WIDTH;\nlet cells = [];\nlet currentScore = 0;\nlet bestScore = getBestScore() === null ? 0 : getBestScore();\n\n// create and add cells to the board\nfunction createBoard() {\n  for (let i = 0; i < totalCell; i++) {\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.setAttribute(\"data-index\", i);\n    cell.setAttribute(\"data-digits\", 0);\n    cells.innerHTML = 0;\n    gameBoard.appendChild(cell);\n    cells.push(cell);\n  }\n}\n\n// generate number (2 or 4) at a random available cell\nfunction generateNewTile() {\n  const rand = Math.floor(Math.random() * cells.length);\n  if (cells[rand].innerHTML == 0) {\n    cells[rand].innerHTML = randomNumTwoOrFour();\n  } else {\n    // if a cell is already has a number, then find a new tile\n    checkLost();\n    if(!checkisFull()){\n      generateNewTile();\n    }\n  }\n}\n\n// returns 2 or 4\nfunction randomNumTwoOrFour() {\n  let rand = Math.random();\n  return rand > 0.5 ? 4 : 2;\n}\n\n// this game always generates 2 tiles at once\nfunction generateTwoNewTile() {\n  generateNewTile();\n  generateNewTile();\n}\n\nfunction moveDown() {\n  // get cells of each row and update their value\n  for (let i = 0; i < WIDTH; i++) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let column = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + WIDTH * j].innerHTML;\n      column.push(parseInt(cell));\n    }\n\n    column = column.filter((num) => num);\n    let emptyCellLength = WIDTH - column.length;\n    let newColumn = Array(emptyCellLength).fill(0).concat(column);\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + WIDTH * j].innerHTML = newColumn[j];\n    }\n  }\n}\n\nfunction moveUp() {\n  // get cells of each row and update their value\n  for (let i = 0; i < WIDTH; i++) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let column = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + WIDTH * j].innerHTML;\n      column.push(parseInt(cell));\n    }\n\n    column = column.filter((num) => num);\n    let emptyCellLength = WIDTH - column.length;\n\n    let newColumn = column.concat(Array(emptyCellLength).fill(0));\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + WIDTH * j].innerHTML = newColumn[j];\n    }\n  }\n}\n\nfunction moveRight() {\n  // get cells of each column and update their value\n  for (let i = 0; i < totalCell; i += WIDTH) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let row = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + j].innerHTML;\n      row.push(parseInt(cell));\n    }\n\n    row = row.filter((num) => num);\n    let emptyCellLength = WIDTH - row.length;\n    let newRow = Array(emptyCellLength).fill(0).concat(row);\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + j].innerHTML = newRow[j];\n    }\n  }\n}\n\nfunction moveLeft() {\n  // get cells of each column and update their value\n  for (let i = 0; i < totalCell; i += WIDTH) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let row = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + j].innerHTML;\n      row.push(parseInt(cell));\n    }\n\n    row = row.filter((num) => num);\n    let emptyCellLength = WIDTH - row.length;\n    let newRow = row.concat(Array(emptyCellLength).fill(0));\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + j].innerHTML = newRow[j];\n    }\n  }\n}\n\n// merge cells and check win state when merge are all set\n// merge cells when user acts in right or left direction\nfunction mergeHorizontal() {\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < WIDTH - 1; j++) {\n      let index = WIDTH * i + j;\n      if (cells[index].innerHTML === cells[index + 1].innerHTML) {\n        let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + 1].innerHTML);\n        cells[index].innerHTML = merge;\n        cells[index + 1].innerHTML = 0;\n        updateScores(merge);\n      }\n    }\n  }\n  checkWin();\n}\n\n// merge cells when tiles move in the up or down direction\nfunction mergeVertical() {\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < WIDTH - 1; j++) {\n      let index = j * WIDTH + i;\n      if (cells[index].innerHTML === cells[index + WIDTH].innerHTML) {\n        let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + WIDTH].innerHTML);\n        cells[index].innerHTML = merge;\n        cells[index + WIDTH].innerHTML = 0;\n        updateScores(merge);\n      }\n    }\n  }\n  checkWin();\n}\n\n// update the current and best score\nfunction updateScores(bonus) {\n  currentScore += bonus;\n  currentScoreDisplay.innerHTML = currentScore;\n  if (currentScore > parseInt(bestScore)) {\n    setBestScore(currentScore);\n    bestScoreDisplay.innerHTML = currentScore;\n  }\n}\n\n// bind user action with key\nfunction control(e) {\n  if (e.keyCode === 37) {\n    keyUpLeft();\n  } else if (e.keyCode === 38) {\n    keyUpUp();\n  } else if (e.keyCode === 39) {\n    keyUpRight();\n  } else if (e.keyCode === 40) {\n    keyUpDown();\n  }\n}\n\nfunction keyUpLeft() {\n  moveLeft();\n  mergeHorizontal();\n  moveLeft();\n  generateTwoNewTile();\n  addColours();\n  checkLost();\n}\n\nfunction keyUpRight() {\n  moveRight();\n  mergeHorizontal();\n  moveRight();\n  generateTwoNewTile();\n  addColours();\n  checkLost();\n}\n\nfunction keyUpUp() {\n  moveUp();\n  mergeVertical();\n  moveUp();\n  generateTwoNewTile();\n  addColours();\n  checkLost();\n}\n\nfunction keyUpDown() {\n  moveDown();\n  mergeVertical();\n  moveDown();\n  generateTwoNewTile();\n  addColours();\n  checkLost();\n}\n\n// a win happens when 2048 is generated\nfunction checkWin() {\n  for (let i = 0; i < totalCell; i++) {\n    if (cells[i].innerHTML == 2048) {\n      alert(\"\\t\\t You win! \\n Your score is \" + currentScore);\n      newGame();\n    }\n  }\n}\n\n// a loss happens when all cells are full and they are not mergeable \nfunction checkLost() {\n  if (checkisFull()) {\n    // check if any tiles are mergeable\n    for (let i = 0; i < totalCell-6; i++) {\n      // check vertical\n      if((cells[i].innerHTML == cells[i+6].innerHTML)){\n        // the user did not lose the game\n        return;\n      }\n    }\n    for (let i = 0; i < totalCell-1; i++) {\n      if((cells[i].innerHTML == cells[i+1].innerHTML) && i%6 != 0){\n         // the user did not lose the game\n        return;\n      }\n    }\n    alert(\"\\t\\t You Lost\\n Your score is \" + currentScore);\n    newGame();\n  }\n}\n\n// check if the board is full\nfunction checkisFull(){\n  let numEmptyCells = 0;\n  for (let i = 0; i < totalCell; i++) {\n    if (cells[i].innerHTML == 0) {\n      numEmptyCells++;\n    }\n  }\n\n  return numEmptyCells == 0;\n}\n\n// function start new game\nfunction newGame() {\n  resetGame();\n  generateTwoNewTile();\n  addColours();\n}\n\n// reset the cells and scores\nfunction resetGame() {\n  cells.forEach((cell) => {\n    cell.innerHTML = \"\";\n    cell.setAttribute(\"data-digits\", 0);\n  });\n  currentScore = 0;\n  currentScoreDisplay.innerHTML = 0;\n}\n\n// apply a colour and font-size based on the tile number\nfunction addColours() {\n  for (let i = 0; i < totalCell; i++) {\n    let number = cells[i].innerHTML;\n    switch (number) {\n      case \"\":\n      case \"0\":\n        cells[i].style.backgroundColor = \"#afa184\";\n        cells[i].style.colour = \"rgb(175, 161, 132)\";\n        cells[i].setAttribute(\"data-digits\", 0);\n        break;\n      case \"2\":\n        cells[i].style.backgroundColor = \"#eee4ea\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"4\":\n        cells[i].style.backgroundColor = \"#ede2c8\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"8\":\n        cells[i].style.backgroundColor = \"#f2b179\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"16\":\n        cells[i].style.backgroundColor = \"#ffceaa\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"32\":\n        cells[i].style.backgroundColor = \"#e8c083\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"64\":\n        cells[i].style.backgroundColor = \"#ffab6e\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"128\":\n        cells[i].style.backgroundColor = \"#fd9787\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"256\":\n        cells[i].style.backgroundColor = \"#eah89c\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"512\":\n        cells[i].style.backgroundColor = \"#76daff\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"1024\":\n        cells[i].style.backgroundColor = \"#beeaab\";\n        cells[i].setAttribute(\"data-digits\", 4);\n        break;\n      case \"2048\":\n        cells[i].style.backgroundColor = \"#d7d0f0\";\n        cells[i].setAttribute(\"data-digits\", 4);\n        break;\n    }\n  }\n}\n\n// set up the screen with a new game\ncreateBoard();\ngenerateTwoNewTile();\naddColours();\nbestScoreDisplay.innerHTML = bestScore;\n\n// accept keyboard input from the user\ndocument.addEventListener(\"keyup\", control);\n\n// allow restarting the game\nconst newBtn = document.getElementById(\"new-btn\");\nnewBtn.onclick = function () {\n  newGame();\n};\n"],"names":["gameBoard","document","querySelector","currentScoreDisplay","getElementById","bestScoreDisplay","cells","currentScore","bestScore","getBestScore","generateNewTile","rand","Math","floor","random","length","innerHTML","checkLost","checkisFull","generateTwoNewTile","moveDown","i","column","j","cell","push","parseInt","filter","num","emptyCellLength","newColumn","Array","fill","concat","moveUp","moveRight","WIDTH","row","newRow","moveLeft","mergeHorizontal","index","merge","updateScores","checkWin","mergeVertical","bonus","setBestScore","alert","newGame","totalCell","numEmptyCells","forEach","setAttribute","addColours","style","backgroundColor","colour","createElement","classList","add","appendChild","createBoard","addEventListener","e","keyCode","onclick"],"version":3,"file":"index.b4bfa612.js.map"}